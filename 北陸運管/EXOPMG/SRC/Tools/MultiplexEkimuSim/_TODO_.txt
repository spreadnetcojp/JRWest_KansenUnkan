
--

シナリオタブに「Mainに渡す引数」というテキストボックスを用意し、StartRunning に String() を渡せるようにする？

--

NAK事由のパラメータには文字列ではなくハイフン区切りのバイト列を渡す仕様にして、
文字列で記述したい場合は $BytesFrStr<102NO DATA; 932; 50; 20> などと記述する方が柔軟では？
また、そうするなら、終了電文情報のパラメータも同様の仕様にしたい。
	ただ、これらで得られる柔軟性は、ソケットデバッガを使って実施してもよい単体レベルのテストにしか恩恵がないうえ、
	NAK事由や終了電文情報を生成したい外部アプリが多少面倒なことになる（ハイフン区切りの１６進文字列を生成しなければならなくなる）。
	また、一見すると任意のバイト列を生成できて柔軟性があるようにみえるが、現状のTelegrapherでは、
	送信したNAK電文からNAK事由コードを抽出して（ASCIIであることを前提にした上で先頭３文字をIntegerにParseして）、
	そのレベルに見合った処理（回線切断など）を行うことになっているため、結局困ったことになるはず。
	→ TelegrapherのSendReplyTelegramを強引にオーバーライドして解決できる。

--

■純VB.NET形式シナリオまたは、lua形式シナリオ（従来のシナリオとは拡張子で区別する）

	シナリオは任意名のクラスとして用意する（固定名にすると、機器ごとに違うシナリオを同時実行させる際に名前の衝突がおきるため）。

	ユーザには、シナリオを実装したファイル名を指定させるとともに、コンボボックスからエントリポイントを選択させる？
	それとも、シナリオのクラスに JR.ExOpmg.ISimScenario をインプリメントすることを必須化し、
	シミュレータは、シナリオをコンパイルした後、アセンブリの中から JR.ExOpmg.ISimScenario.EntryProc の実装を自動で探し出す？

	シナリオを書く上で必須となるステートメントは ScenarioClient クラスのメソッドとして提供する。
	また、上記ステートメントに文脈（と、その背後にある当該機器の ScenarioEnv の状態）
	を伝えるための ScenarioContext クラスも用意する。

		シナリオのクラスでは、コンストラクタで
			Me.ClientAll = New ScenarioClient("000-000-00-00")
		などとして ScenarioClient オブジェクトを作成しておき、
		Main(ByVal context As ScenarioContext) などで
			Dim result = ClientAll.ConnectToServer(context, ....)
		のようにするか？

		それとも、"000-000-00-00" の部分はステートメントごとに動的に決める可能性も高いので、ScenarioClient は Module とし、
		シナリオのクラスの Main(ByVal context As ScenarioContext) などでは、
				Dim result = ScenarioClient.ConnectToServer(context, EkCode("000-000-00-00"), ...)
		などとする方がよいか。

		↓
		ScenarioClient自体を気軽にインスタンス化できるStructureにするのがよさそう。
			Dim result = ScenarioClient("000-000-00-00").ConnectToServer(context, ...)
		のような感じ。

		↓
		そもそも、現在のスレッドの機器が、指定された機器コードと一致する場合にだけ
		ステートメントを実行したいというだけなのだから、現在のスレッドの機器コードや
		配下の端末の機器コードを参照できればよい。
		つまり、エントリポイントのメソッドが引数受け取るオブジェクトに
		機器コードのプロパティを用意するだけでよい。
		また、機器コードがマッチするか否かをすっきり記述可能にするために、
		ユーティリティクラスに EkCodeMatches 関数を用意すればよい。

		また、シナリオの個々のステートメントで自由に Context を指定できると、混乱するし、
		読みづらいはず。よって、ScenarioContext ではなく、ScenarioEnv を指定できるべきである。

		結論として、ScenarioClient は不要であり、ステートメントごとに（エントリポイントが
		引数で受け取った）ScenarioEnv を指定するのがよい。
		なので、ScenarioEnv に ConnectToServer やら RegUpbFreeTelegramHandlerProc やらを用意し、
		シナリオのクラスの Main(ByVal env As ScenarioEnv) などでは、
			If ScenarioUtil.EkCodeMatches(env.Monitor.Code, targetCode) Then
				Dim result = env.ConnectToServer(...)
				If retult = 0 Then
					...
				Else
					...
				End If
			End If
		のような感じに実装する。
		ScenarioEnv というクラス名は（従来形式のシナリオを実行するためのクラスの名前として）既に使っているため、
		名前としては結局 ScenarioClient がよいか？

	ScenarioClient.SpawnContext(デリゲート) で、デリゲートが示すメソッドを新しいコンテキストで開始する？

		(案) １つの ScenarioClient 内でのコンテキストの切り替え（再スケジュール）は、ScenarioClient.FooBar の実行で
		現在のコンテキストが待ち状態になった際にのみ行う。
		つまり、スレッドを開始するように見えるが、実は、ScenarioClient.SpawnContext の中で呼び出すだけである。
		ただし、新しいコンテキストで、待ち状態になる ScenarioClient.FooBar を実行した際、呼び元に Return する。
		呼び元でも待ち状態になる ScenarioClient.FooBar を実行した際は、配下のコンテキストに
		実行可能状態のものがないか検索し、あれば、そちらのコンテキストの ScenarioClient.FooBar の中
		（Return した箇所）に復帰する（どうやって？）

		→ シナリオ実装者に排他制御を行わせる前提で、スレッドを作ってしまってよいかもしれない。
		その場合、ScenarioClient はスレッド別にする（または、内部のスレッド別に必要な領域をTLS に用意する）。

		たぶん VB.NET でシナリオを書く場合は、新しいコンテキストを作ることがほとんどないので、
		ただでさえ機器別に存在しているスレッドがさらにコンテキスト別になるわけではあるが、
		リソースが不足することはないはず。

		なぜ新しいコンテキストを作ることが殆どないかといえば、そもそも SpawnContext を行う需要が殆どない上、
		RegFooBarProc で登録するハンドラが発動する際なども新しいコンテキストで動作させる必要がないからである。
		つまり、ハンドラは ScenarioClient.Wait などの最中に呼び出されて、速やかに最後まで実行される仕様とする。
		VB.NET という既存言語で記述する以上、記述する者は既存のイベント駆動なプログラムをイメージするはずであるから、
		ハンドラをスレッドとは考えないはずである。つまり、ハンドラの中で永久に何かを繰り返したり、何かを待ち続けるような
		プログラムは記述しないはずであり、そのようなことをしないのは記述する側の責務と考えるはず。
		ハンドラの中で ScenarioClient.Wait(TimeSpan.FromMinutes(20)) のようなことをされたら
		どうするべきかなどは悩ましいが、それも行わないはず。
		→ ハンドラが実行され得るのは Wait や WaitForFooBar で待機を行っている最中であるから、再帰的にハンドラが
		呼び出されることを防ぎたいなら、ScenarioClient において現在のコンテキストがハンドラを実行中か否か
		（あるいは、ハンドラの呼び出しの深さ）を管理するようにし、Wait や WaitFooBar において、チェックを行うようにしてもよい。


■時刻はシステム時刻ではなく、アプリ管理の時刻を使うようにする。

	EkTelegram に手を入れる必要がある。


■運管サーバ本体で使う「シナリオ生成クラス」を用意する。

【なまえ】
	ScenarioWriter

【使いかた】
	駅務機器シミュレータがCapDataPathのメソッドを呼び出しているのと同じような箇所で、
	ProcOnFooBarメソッドを呼び出す。

【動作】

・運管サーバでt時に070-001-0060-01から受動的Hogeシーケンスがあった場合は、以下の行を出力。
	070-001-0060-01 WaitUntil t
	070-001-0060-01 ActiveHoge a, b, c

・運管サーバがt時に070-001-0060-01に対する能動的Hogeシーケンスを実施した場合は、以下の行を出力。
	070-001-0060-01 WaitUntil t-1min
	070-001-0060-01 WaitForPassiveHoge a, b, c, d, 2min


■運管端末も含めた全機種を１プロセスで模擬できるように改善する。

・たぶん、その方が、運用試験的なシナリオを管理・実行しやすい。

・シナリオ内の主語（EkCode）では、Modelメンバで機種を指定する。

・受け入れ可能な受動シーケンスを、どうやって機種別に表示するかが課題。

・運管端末に駅務機器識別コードが無いのもネック。
　１台の運管端末だけを想定するなら、特定の駅務機器識別コードを運管端末とみなせばよいのだが...
　→運管サーバから特定の運管端末につないでくるのを待つようなことはないのだし、
　異なる運管端末には、異なる駅務機器識別コードを割り当てて、シミュレータの内部で
　識別できるようにすれば、特に問題はなさそう？


■マニュアルを用意する。

サンプルシナリオのコメントを除去して、代替となる専用のドキュメントを作成する。
複数のファイルに同一のマニュアル（相当のもの）が記述されていると最新の文面を管理するのが大変なので。

→シミュレータで「Help」ボタンを押下すると、WebBrowserで
Application.StartupPathの下にあるManual\index.htmlを開くようにする。

・シミュレータの概要（index.html）
・シナリオファイルの概要とステートメントの種類の一覧（ScenarioIndex.html）
	（管理が面倒なので、ステートメントの種類に番号をつけるのはやめて、詳細な説明には、ハイパーリンクで紐づける）
・そこからリンクされるステートメントごとの機能・引数を説明するページ
・それらからリンクされる特殊な引数の記述法のページ（以下のようなもろもろ）
	<入力ファイルパス>に「Bytes:」ではじまる文字列やワイルド―カードが記述された場合の動作
	<実行機器>の書式やワイルドカードなコード
	<日時>の書式
	<時間>の書式
	パラメータ全般に記述可能な「$〜」
	比較用ファイルやマスク用ファイルのパスの書式（「*」の場合の意味）
・シナリオと外部コマンドのインタフェース
	（シナリオファイルの概要のページや「$ExecCmdFunc」の説明からリンクする）
	「_DONE_.txt」の「外部コマンドとの連携」に記述してあること全般を最終仕様に合わせて書き直し。
・シナリオと外部常駐プロセスのインタフェース
	（シナリオファイルの概要のページや「$ExecAppFunc」の説明からリンクする）
	「_DONE_.txt」の「外部コマンドとの連携」や「外部常駐プロセスとの連携」に記述してあること
	全般を最終仕様に合わせて書き直し。
・シミュレータを別のアプリからリモート操作する際のインタフェース
	（シミュレータの概要からリンクする）
	メッセージキューの名前が「ExOpmgMultiplexEkimuSim@" & sWorkingDir.Replace("\", "/")」であること。
	メッセージの書式（AppSpecificは1に）

なんだかWikiにするのが楽なような気も...
